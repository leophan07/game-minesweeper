{"version":3,"sources":["components/App.js","components/Button.js","components/NewGame.js","containers/NewGame.js","redux/actions.js","redux/constants.js","components/GridMines.js","components/Modal.js","helpers/index.js","components/ButtonGroup.js","containers/GridMines.js","services/api.js","containers/App.js","serviceWorker.js","redux/reducer.js","index.js"],"names":["Wrapper","styled","div","Title","h1","button","Content","PlayButton","Button","connect","state","isStarting","isSetting","onPlayGame","useState","level","setLevel","onChange","e","parseInt","target","value","onClick","data-testid","setDataSuccess","data","type","payload","Grid","Row","Cell","props","isOpen","css","density","handleColor","isMine","Modal","ModalContent","areaSweep","x","y","el","push","length","generateData","size","mines","forEach","i","j","openCellEmpty","checkWin","dataGrid","cellNotOpen","msToTime","s","addZ","n","secs","mins","dispatch","onSetDataSuccess","onResetGame","showModal","setShowModal","startTime","setStartTime","endTime","setEndTime","openCell","cell","performance","now","openGrid","newData","map","row","key","ButtonGroup","a","async","getMines","fetch","response","json","result","msg","Error","isPlaying","onSetData","onSetDataError","err","setDataError","onSetIsPlaying","setMines","GridMines","NewGame","Boolean","window","location","hostname","match","initialState","error","myReducer","action","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20a63520.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  text-align: center;\n`;\n\nexport const Title = styled.h1`\n  margin-top: 20px;\n`;","import styled from 'styled-components';\n\nexport default styled.button`\n  padding: 5px 20px;\n  cursor: pointer;\n  border-radius: 5px;\n`;","import styled from 'styled-components';\nimport Button from './Button';\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 200px;\n  margin: 0 auto;\n`;\n\nexport const PlayButton = styled(Button)`\n  margin-top: 20px;\n`;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Content, PlayButton } from '../components/NewGame';\n\nfunction NewGameContainer({ onPlayGame, isStarting }) {\n  const [level, setLevel] = useState(9);\n\n  return (\n    <Content>\n      <select onChange={(e) => setLevel(parseInt(e.target.value))}>\n        <option value={9}>Beginner</option>\n        <option value={16}>Advantage</option>\n      </select>\n      <PlayButton onClick={() => onPlayGame(level)} data-testid=\"button-play-game\">\n        {isStarting ? 'Please wait' : 'Play game'}\n      </PlayButton>\n    </Content>\n  )\n}\n\nNewGameContainer.propTypes = {\n  isStarting: PropTypes.bool.isRequired,\n  onPlayGame: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isStarting: state.isSetting,\n  };\n}\n\nexport default connect(mapStateToProps)(NewGameContainer);","import * as types from './constants';\n\nexport const setData = () => ({\n  type: types.SET_DATA\n});\n\nexport const setDataSuccess = (data) => ({\n  type: types.SET_DATA_SUCCESS,\n  payload: data\n});\n\nexport const setDataError = (err) => ({\n  type: types.SET_DATA_ERROR,\n  payload: err\n});\n\nexport const setIsPlaying = () => ({\n  type: types.SET_IS_PLAYING\n})\n\nexport const resetGame = () => ({\n  type: types.RESET_GAME\n})","export const SET_DATA = 'SET_DATA';\nexport const SET_DATA_SUCCESS = 'SET_DATA_SUCCESS';\nexport const SET_DATA_ERROR = 'SET_DATA_ERROR';\n\nexport const SET_IS_PLAYING = 'SET_IS_PLAYING';\nexport const RESET_GAME = 'RESET_GAME';","import styled, { css } from 'styled-components';\n\nconst handleColor = density => {\n  switch (parseInt(density)) {\n    case 1:\n      return \"#0000ff\";\n    case 2:\n      return \"#cc33ff\";\n    case 3:\n      return \"#009900\";\n    case 4:\n      return \"#ffaa00\";\n    case 5:\n      return \"#8000ff\";\n    case 6:\n      return \"#b3b300\";\n    case 7:\n      return \"#206020\";\n    case 8:\n      return \"#4ce600\";\n    default:\n      return \"#cccccc\";\n  }\n};\n\nexport const Grid = styled.div`\n  width: max-content;\n  margin: 0 auto;\n  border: 1px solid #aaaaaa;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const Cell = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #aaaaaa;\n  border-radius: 3px;\n  margin: 1px;\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  font-weight: 700;\n\n  ${props => props.isOpen && css`\n    background-color: #cccccc ;\n    color: ${({ density }) => handleColor(density)};\n  `}\n  ${props => props.isOpen && props.isMine && 'background-color: red;'}\n`;","import styled from 'styled-components';\n\nexport const Modal = styled.div`\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.4);\n`;\n\nexport const ModalContent = styled.div`\n  background-color: #fefefe;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 300px;\n`;","export function areaSweep(x, y, data) {\n  const el = [];\n\n  //top left\n  if (x > 0 && y > 0) {\n    el.push(data[x-1][y-1]);\n  }\n\n  //top\n  if (x > 0) {\n    el.push(data[x-1][y]);\n  }\n\n  //top right\n  if (x > 0 && y < data.length - 1) {\n    el.push(data[x-1][y+1]);\n  }\n\n  //right\n  if (y < data.length - 1) {\n    el.push(data[x][y+1]);\n  }\n\n  //bottom right\n  if ((x < data.length - 1) && (y < data.length - 1)) {\n    el.push(data[x+1][y+1]);\n  }\n\n  //bottom\n  if (x < data.length - 1) {\n    el.push(data[x+1][y]);\n  }\n\n  //bottom left\n  if (x < data.length - 1 && y > 0) {\n    el.push(data[x+1][y-1]);\n  }\n\n  //left\n  if (y > 0) {\n    el.push(data[x][y-1]);\n  }\n\n  return el;\n}\n\nexport const generateData = (size, mines) => {\n  \n  let data = [];\n\n  //generate grid\n  for (let x = 0; x < size; x++) {\n    data.push([]);\n    for (let y = 0; y < size; y++) {\n      data[x][y] = {\n        x,\n        y,\n        isMine: false,\n        isOpen: false,\n      };\n    }\n  }\n\n  //set mines in grid\n  mines.forEach(el => {\n    const { x, y } = el;\n    data[x][y].isMine = true;\n  });\n\n  //set density in grid\n  for (let i = 0; i < data.length; i++) {\n    for (let j = 0; j < data.length; j++) {\n      if (data[i][j].isMine !== true) {\n        let density = 0;\n        const area = areaSweep(data[i][j].x, data[i][j].y, data);\n        area.forEach(value => {\n          if (value.isMine) {\n            density++;\n          }\n        });\n        if (density > 0) {\n          data[i][j].density = density;\n        }\n      }\n    }\n  }\n\n  return data;\n}\n\nexport const openCellEmpty = (x, y, data) => {\n  let area = areaSweep(x, y, data);\n  area.forEach(value => {\n    if (!value.isOpen && (value.density === 0 || !value.isMine)) {\n      data[value.x][value.y].isOpen = true;\n      if (!value.density) {\n        openCellEmpty(value.x, value.y, data);\n      }\n    }\n  });\n  return data;\n}\n\nexport const checkWin = (dataGrid, mines) => {\n  let cellNotOpen = 0;\n  for (let i = 0; i < dataGrid.length; i++) {\n    for (let j = 0; j < dataGrid.length; j++) {\n      if (dataGrid[i][j].isOpen === false) {\n        cellNotOpen++;\n      }\n    }\n  }\n\n  if (cellNotOpen === mines) {\n    return true;\n  }\n  return false;\n}\n\nexport const msToTime = (s) => {\n  function addZ(n) {\n    return (n < 10 ? '0' : '') + n;\n  }\n\n  s = (s - s % 1000) / 1000;\n  const secs = s % 60;\n  s = (s - secs) / 60;\n  const mins = s % 60;\n  const hrs = (s - mins) / 60;\n  const tm = addZ(hrs) + ':' + addZ(mins) + ':' + addZ(secs);\n  \n  return tm;\n}","import styled from 'styled-components';\n\nexport default styled.div`\n  margin: 20px auto;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n`;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setDataSuccess, resetGame } from '../redux/actions';\nimport { Grid, Row, Cell } from '../components/GridMines';\nimport { Modal, ModalContent } from '../components/Modal';\nimport { openCellEmpty, checkWin, msToTime } from '../helpers';\nimport Button from '../components/Button';\nimport ButtonGroup from '../components/ButtonGroup';\n\nfunction GridMinesContainer({ \n  dataGrid, onSetDataSuccess, onResetGame, \n  onPlayGame, isSetting, mines \n}) {\n  const [showModal, setShowModal] = useState(null);\n  const [startTime, setStartTime] = useState(0);\n  const [endTime, setEndTime] = useState(0);\n\n  function openCell(cell) {\n    if (startTime === 0) {\n      setStartTime(performance.now());\n    }\n\n    const { x, y, isMine } = cell;\n    if (isMine) {\n      setEndTime(performance.now());\n      setShowModal('lost');\n      openGrid();\n    } else {\n      let newData = dataGrid;\n      newData[x][y].isOpen = true;\n      if (checkWin(dataGrid, mines)) {\n        setEndTime(performance.now());\n        setShowModal('won');\n      }\n      if (!newData[x][y].density) {\n        newData = openCellEmpty(x, y, newData);\n      }\n      onSetDataSuccess(newData);\n    }\n  }\n\n  function openGrid() {\n    for (let i = 0; i < dataGrid.length; i++) {\n      for (let j = 0; j < dataGrid.length; j++) {\n        if (!dataGrid[i][j].isOpen && dataGrid[i][j].isMine) {\n          dataGrid[i][j].isOpen = true;\n        }\n      }\n    }\n    onSetDataSuccess(dataGrid);\n  }\n\n  async function onNewGame() {\n    await onPlayGame(dataGrid.length);\n    setShowModal(null);\n    setStartTime(0);\n  }\n\n  return (\n    <>\n      <Grid data-testid=\"grid-mines\">\n        {dataGrid.map((row, x) => (\n          <Row key={x}>\n            {row.map((cell, y) => (\n              <Cell \n                key={y} \n                isOpen={cell.isOpen} \n                isMine={cell.isMine}\n                density={cell.density} \n                onClick={() => openCell(cell)}\n              >\n                {cell.isOpen ? cell.isMine ? '💣' : cell.density : ''}\n              </Cell>\n            ))}\n          </Row>\n        ))}\n      </Grid>\n      {showModal && \n        <Modal>\n          <ModalContent>\n            <p>{`You ${showModal} the game in ${msToTime(endTime - startTime)}`}</p>\n            <ButtonGroup>\n              <Button onClick={onNewGame}>\n                {isSetting ? 'Please wait' : 'New Game'}\n              </Button>\n              <Button onClick={() => onResetGame() && setShowModal(null)}>Home Page</Button>\n            </ButtonGroup>\n          </ModalContent>\n        </Modal>\n      }\n    </>\n  )\n}\n\nGridMinesContainer.propTypes = {\n  dataGrid: PropTypes.array.isRequired,\n  isSetting: PropTypes.bool.isRequired,\n  onSetDataSuccess: PropTypes.func.isRequired,\n  onResetGame: PropTypes.func.isRequired,\n  onPlayGame: PropTypes.func.isRequired,\n  mines: PropTypes.number.isRequired,\n}\n\nconst mapStateToProps = ({ data, isSetting }) => {\n  return {\n    dataGrid: data,\n    isSetting\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetDataSuccess: (data) => {\n      return dispatch(setDataSuccess(data));\n    },\n    onResetGame: () => {\n      return dispatch(resetGame());\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GridMinesContainer);","export const getMines = async (level) => {\n  const mines = level === 9 ? 10 : 40;\n  try {\n    const response = await fetch(`https://tiki-minesweeper.herokuapp.com/getMines?size=${level}&mines=${mines}`);\n    if (response) {\n      const result = await response.json();\n      const { data, msg } = result;\n      if (msg === \"success\")\n      return data;\n    } else {\n      throw new Error (\"Error\");\n    }\n  } catch (error) {\n    throw error;\n  }  \n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Wrapper, Title } from '../components/App';\nimport NewGameContainer from './NewGame';\nimport GridMinesContainer from './GridMines';\nimport { setData, setDataSuccess, setDataError, setIsPlaying } from '../redux/actions';\nimport { generateData } from '../helpers';\nimport { getMines } from '../services/api';\n\nfunction App({ onSetData, onSetDataSuccess, onSetDataError, onSetIsPlaying, isPlaying }) {\n  const [mines, setMines] = useState(10);\n\n  async function onPlayGame(level) {\n    const mines = level === 9 ? 10 : 40;\n    setMines(mines);\n    onSetData();\n\n    try {\n      const response = await getMines(level);\n      const dataGrid = generateData(level, response);\n      onSetDataSuccess(dataGrid);\n      onSetIsPlaying();\n    } catch (error) {\n      onSetDataError(error);\n    }\n  }\n\n  return (\n    <Wrapper>\n      <Title>Mini Minesweeper</Title>\n      { !isPlaying ? \n        <NewGameContainer onPlayGame={onPlayGame} /> \n      : \n        <GridMinesContainer onPlayGame={onPlayGame} mines={mines} />\n      }\n    </Wrapper>\n  );\n}\n\nApp.propTypes = {\n  isPlaying: PropTypes.bool.isRequired,\n  onSetData: PropTypes.func.isRequired,\n  onSetDataSuccess: PropTypes.func.isRequired,\n  onSetDataError: PropTypes.func.isRequired,\n  onSetIsPlaying: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = ({ isPlaying }) => {\n  return { isPlaying };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetData: () => {\n      return dispatch(setData());\n    },\n    onSetDataSuccess: data => {\n      return dispatch(setDataSuccess(data));\n    },\n    onSetDataError: err => {\n      return dispatch(setDataError(err));\n    },\n    onSetIsPlaying: () => {\n      return dispatch(setIsPlaying());\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport * as types from './constants';\n\nconst initialState = {\n  data: [],\n  isSetting: false,\n  error: false,\n  isPlaying: false,\n};\n\nconst myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.SET_DATA:\n      return {\n        ...state,\n        isSetting: true,\n      };\n    case types.SET_DATA_SUCCESS:\n      return {\n        ...state,\n        isSetting: false,\n        data: [...action.payload],\n      }\n    case types.SET_DATA_ERROR:\n      return {\n        isSetting: false,\n        data: [],\n        error: action.payload\n      }\n    case types.SET_IS_PLAYING:\n      return {\n        ...state,\n        isPlaying: true\n      }\n    case types.RESET_GAME:\n      return initialState;\n    default:\n      return state;\n  }\n}\n\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './redux/reducer';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}